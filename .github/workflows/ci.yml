name: CI / SAST & DAST Pipeline

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  🔍 Static Analysis (SAST):
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          [ -f requirements.txt ] && pip install -r requirements.txt

      # --- CodeQL Analysis ---
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v2

      # --- Semgrep Analysis ---
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci

      # --- Bandit: full report (no fail) ---
      - name: Bandit — full report
        run: |
          pip install bandit
          bandit -r . --exit-zero -f json -o bandit-report.json

      # --- Bandit: high-severity gate (fail if any) ---
      - name: Bandit — fail on high severity
        run: |
          bandit -r . -lll

      # --- Upload SAST artifacts ---
      - name: Upload SAST reports
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.json
            semgrep-report.json

  🛠 Build & Test:
    needs: 🔍 Static Analysis (SAST)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      - name: Install test deps
        run: |
          pip install flake8 pytest
          [ -f requirements.txt ] && pip install -r requirements.txt
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics \
            && flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Run pytest
        run: pytest

  🛡️ Dynamic Analysis (DAST):
    needs: 🛠 Build & Test
    runs-on: ubuntu-latest
    services:
      app:
        image: python:3.10
        ports: ["5000:5000"]
        options: >-
          --health-cmd="curl -f http://localhost:5000 || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        command: bash -lc "pip install -r requirements.txt && python app.py"
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.4.0
        with:
          target: "http://localhost:5000"
          cmd_options: -r zap-report.html
          fail_on_warn: false
      - name: Upload DAST report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: zap-report.html
